<!DOCTYPE html>
<!--
   Copyright 2021 The MITRE Corporation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<html>

<head>
    <% include ../partials/head %>
</head>

<body class="skin-blue fixed sidebar-mini sidebar-mini-expand-feature">
    <div class="wrapper">

        <header class="main-header">
            <% include ../partials/header %>
        </header>
        <!-- Left side column. contains the logo and sidebar -->
        <aside class="main-sidebar">
            <% include ../partials/sidebar %>
        </aside>
        <div class="content-wrapper">
            <!-- Content Header (Page header) -->

            <!-- Main content -->
            <section class="content">
                <div class="row">
                    <div class="col-lg-12">
                        <div class="box">
                            <div class="box-header with-border">
                                <h3 class="box-title">My Work Items</h3>
                            </div>
                            <% include ../partials/workItemsTable.ejs %>
                        </div>
                    </div>
                    <!-- /.box -->
                </div>
            </section>
            <!-- /.content -->
        </div>
        <!-- /.content - wrapper -->
         <% include ../partials/footer %>
    

        <!-- Confirm Forward Modal -->
        <div class="modal fade" id="confirm-forward" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-prompt-user">
                <div class="modal-content">

                    <div class="modal-header">
                        <h4 class="modal-title" id="myModalLabel">Confirm Forward</h4>
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    </div>

                    <div class="modal-body centered">
                        <p>Are you sure you want to forward this work item for evidence approval?</p>
                    </div>

                    <div class="modal-footer centered">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-danger" onclick='forwardWorkItem()'>Forward</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Confirm Return Modal -->
        <div class="modal fade" id="confirm-return" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-prompt-user">
                <div class="modal-content">

                    <div class="modal-header">
                        <h4 class="modal-title" id="myModalLabel">Confirm Return</h4>
                        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                    </div>

                    <div class="modal-body centered">
                        <p>Are you sure you want to return this work item to an Evidence Provider?</p>
                    </div>

                    <div class="modal-footer centered">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-danger" onclick='returnWorkItem()'>Return</button>
                    </div>
                </div>
            </div>
        </div>
        <% include ../partials/workItemModal.ejs %>
    </div>

    <script type="text/javascript" src="/static/workitemHelpers.js"></script>

    <script type="text/javascript">

$('#sidebar_my_workitems').addClass("active");
        var datatable;
        var workitemId;
        var workitemRole;
        var systemName;

        datatable = $('#workitemstable').DataTable();

        $('#workitemstable tbody').on('click', 'tr', function () {

            datatable = $('#workitemstable').DataTable();

            var data = datatable.row(this).data();
            workitemId = data.DT_RowId;

            datatable.$('tr.selected').removeClass('selected');
            $(this).addClass('selected');

            console.log("Work Item ID: " + workitemId);

            $.ajax({

                url: "./getWorkItemResult",

                data: {

                    "workitemId": workitemId

                },
                success: function (workitem) {

                    if (workitem.message == 'Success') {

                        $("#workItemForm").trigger("reset");

                        // Set the selected values.
                        $('#inputSystemName').val(workitem.workitems[0].SYSTEM);
                        $('#inputControlName').val(workitem.workitems[0].CONTROL);
                        $('#inputControlItem').val(workitem.workitems[0].CONTROL_ITEM);
                        $('#inputControlTitle').val(workitem.workitems[0].TITLE);
                        $('#inputControlItemDescription').val(workitem.workitems[0].DESCRIPTION);
                        $('#inputControlDescription').val(workitem.workitems[0].CONTROL_DESC);
                        $('#inputResultDescription').val(workitem.workitems[0].RESULT_DESC);
                        $('#inputRepeatFinding').val(workitem.workitems[0].REPEAT_FINDING_RAW);
                        $('#inputRepeatFindingCOSAId').val(workitem.workitems[0].REPEAT_FINDING_COSA_WEAKNESS_ID);
                        $('#inputFindingTitle').val(workitem.workitems[0].FINDING_TITLE);
                        $('#inputFindingDescription').val(workitem.workitems[0].FINDING_DESCRIPTION);
                        $('#inputWeaknessDescription').val(workitem.workitems[0].WEAKNESS_DESCRIPTION);
                        $('#inputWeaknessType').val(workitem.workitems[0].FK_CONTROL_WEAKNESS_TYPE_ID);
                        $('#inputActionsDescription').val(workitem.workitems[0].RECOMMENDED_CORRECTIVE_ACTIONS);
                        $('#inputBusinessEffect').val(workitem.workitems[0].EFFECT_ON_BUSINESS);
                        $('#inputLikelihoodType').val(workitem.workitems[0].FK_LIKELIHOOD_ID);
                        $('#inputImpactType').val(workitem.workitems[0].FK_IMPACT_ID);
                        $('#inputStatus').val(workitem.workitems[0].FK_WORK_ITEM_STATUS_ID);

                        console.log("Role ID: " + workitem.workitems[0].FORWARD_TO_ROLE_ID);

                        systemName = workitem.workitems[0].SYSTEM;
                        workitemRole = workitem.workitems[0].FORWARD_TO_ROLE_ID;

                        $('#btnReturnWorkItem').show();
                        $('#upload_btn').show();
                        $('#btnDeleteFiles').hide();
                        $('#btnDownloadFiles').hide();

                        // ROLE 2 or 3 is Evidence Approver or Evidence Provider. Only they return or forward work items (for now).
                        if (workitemRole != 3) {
                            $('#upload_btn').hide();
                        }

                        if (workitemRole != 2) {
                            $('#btnReturnWorkItem').hide();
                        }

                        $.ajax({
                            url: "./getEvidenceUploadFilenames",
                            data: {
                                "systemName": systemName,
                                "workitemId": workitemId
                            },
                            success: function (evidenceUploads) {

                                evidence_dataTable.clear().draw();
                                evidence_dataTable.rows.add(evidenceUploads.filenames); // Add new data
                                evidence_dataTable.columns.adjust().draw(); // Redraw the DataTable

                                console.log("Filenames: " + JSON.stringify(evidenceUploads.filenames));

                            },
                            error: function (error) {

                                if (error.status == '401') {
                                    alert('Unauthorized... ');
                                    window.location.replace('/home');
                                } else {
                                    // handle error
                                    console.log('Error getting upload filenames ' + error);
                                }
                            }
                        });

                        $('#workItemModal').modal();

                    } else {
                        alert("Error");
                    }
                },
                error: function (error) {

                    if (error.status == '401') {
                        alert('Unauthorized... ');
                        window.location.replace('/home');
                    } else {
                        // handle error
                        console.log('Error getting work items ' + error);
                    }
                }
            });
        });

        $("#btnUpdateWorkItem").click(function (event) {

            if ($("#workItemForm")[0].checkValidity()) {

                var resultDescription = $(workItemForm).find('textarea[name=inputResultDescription]').val();
                var repeatFinding = $(workItemForm).find('select[name=inputRepeatFinding]').val();
                var repeatFindingCOSA = $(workItemForm).find('input[name=inputRepeatFindingCOSAId]').val();
                var findingTitle = $(workItemForm).find('input[name=inputFindingTitle]').val();
                var findingDescription = $(workItemForm).find('textarea[name=inputFindingDescription]').val();
                var weaknessDescription = $(workItemForm).find('textarea[name=inputWeaknessDescription]').val();
                var weaknessType = $(workItemForm).find('select[name=inputWeaknessType]').val();
                var actionsDescription = $(workItemForm).find('textarea[name=inputActionsDescription]').val();
                var businessEffect = $(workItemForm).find('textarea[name=inputBusinessEffect]').val();
                var likelihood = $(workItemForm).find('select[name=inputLikelihoodType]').val();
                var impact = $(workItemForm).find('select[name=inputImpactType]').val();
                var newStatus = $(workItemForm).find('select[name=inputStatus]').val();

                // If this is an evidence provider (role 3) and they have changed the status to anything other than INCOMPLETE (3).
                if ((workitemRole == 3) && (newStatus != 3)) {

                    $('#workItemModal').modal('hide');

                    $('#confirm-forward').modal();

                } else {

                    console.log("Updating work item" + newStatus);

                    event.preventDefault();

                    var files = document.getElementById('uploadFiles').files;
                    var fileStrings = {};

                    var formData = new FormData();

                    formData.append('systemName', systemName);
                    formData.append('workitemId', workitemId);

                    for (var i = 0, f; f = files[i]; i++) {

                        fileStrings[i] = f.name;

                        // Add the file to the request
                        formData.append('files[]', f, f.name);

                    }

                    $.ajax({

                        type: "POST",
                        url: "./uploadEvidenceFiles",
                        xhr: function () {

                            var myXhr = $.ajaxSettings.xhr();
                            return myXhr;

                        },
                        success: function (data) {

                            //console.log(JSON.stringify(data));
                            // your callback here
                            console.log('Success uploading evidence.');

                            $.post("./updateWorkItemResult", {
                                "workitemId": workitemId,
                                "resultDescription": resultDescription,
                                "repeatFinding": repeatFinding,
                                "repeatFindingCOSA": repeatFindingCOSA,
                                "findingTitle": findingTitle,
                                "findingDescription": findingDescription,
                                "weaknessDescription": weaknessDescription,
                                "weaknessType": weaknessType,
                                "actionsDescription": actionsDescription,
                                "businessEffect": businessEffect,
                                "likelihood": likelihood,
                                "impact": impact,
                                "newStatus": newStatus
                            },
                                function (data, status) {
                                    if (data != "err") {
                                        console.log(data) // 1 record updated
                                        console.log("Updated!!!!" + status);
                                        alert("Updated work item!");
                                        location.reload();

                                    } else {
                                        alert("Something went wrong.");
                                    }
                                });
                        },
                        error: function (error) {

                            if (error.status == '401') {
                                alert('Unauthorized... ');
                                window.location.replace('/home');
                            } else {
                                // handle error
                                console.log('Error uploading evidence ' + error);
                            }
                        },
                        async: true,
                        data: formData,
                        cache: false,
                        contentType: false,
                        processData: false,
                        timeout: 60000

                    });

                }

            } else {

                $("#workItemForm")[0].reportValidity();

            }
        });

        $("#btnReturnWorkItem").click(function (event) {

            if ($("#workItemForm")[0].checkValidity()) {

                var resultDescription = $(workItemForm).find('textarea[name=inputResultDescription]').val();
                var repeatFinding = $(workItemForm).find('select[name=inputRepeatFinding]').val();
                var repeatFindingCOSA = $(workItemForm).find('input[name=inputRepeatFindingCOSAId]').val();
                var findingTitle = $(workItemForm).find('input[name=inputFindingTitle]').val();
                var findingDescription = $(workItemForm).find('textarea[name=inputFindingDescription]').val();
                var weaknessDescription = $(workItemForm).find('textarea[name=inputWeaknessDescription]').val();
                var weaknessType = $(workItemForm).find('select[name=inputWeaknessType]').val();
                var actionsDescription = $(workItemForm).find('textarea[name=inputActionsDescription]').val();
                var businessEffect = $(workItemForm).find('textarea[name=inputBusinessEffect]').val();
                var likelihood = $(workItemForm).find('select[name=inputLikelihoodType]').val();
                var impact = $(workItemForm).find('select[name=inputImpactType]').val();
                var newStatus = $(workItemForm).find('select[name=inputStatus]').val();

                if ((newStatus != 1) && (newStatus != 4)) {

                    $('#workItemModal').modal('hide');

                    $('#confirm-return').modal();

                } else {

                    alert("You cannot return a work item with the status of PASS or RISK ACCEPTED.");

                }

            } else {

                $("#workItemForm")[0].reportValidity();

            }
        });

        function forwardWorkItem() {

            var resultDescription = $(workItemForm).find('textarea[name=inputResultDescription]').val();
            var repeatFinding = $(workItemForm).find('select[name=inputRepeatFinding]').val();
            var repeatFindingCOSA = $(workItemForm).find('input[name=inputRepeatFindingCOSAId]').val();
            var findingTitle = $(workItemForm).find('input[name=inputFindingTitle]').val();
            var findingDescription = $(workItemForm).find('textarea[name=inputFindingDescription]').val();
            var weaknessDescription = $(workItemForm).find('textarea[name=inputWeaknessDescription]').val();
            var weaknessType = $(workItemForm).find('select[name=inputWeaknessType]').val();
            var actionsDescription = $(workItemForm).find('textarea[name=inputActionsDescription]').val();
            var businessEffect = $(workItemForm).find('textarea[name=inputBusinessEffect]').val();
            var likelihood = $(workItemForm).find('select[name=inputLikelihoodType]').val();
            var impact = $(workItemForm).find('select[name=inputImpactType]').val();
            var newStatus = $(workItemForm).find('select[name=inputStatus]').val();

            console.log('workitemId: ' + workitemId);
            console.log('resultDescription: ' + resultDescription);
            console.log('status: ' + newStatus);

            event.preventDefault();

            var files = document.getElementById('uploadFiles').files;
            var fileStrings = {};

            var formData = new FormData();

            formData.append('systemName', systemName);
            formData.append('workitemId', workitemId);

            for (var i = 0, f; f = files[i]; i++) {

                fileStrings[i] = f.name;

                // Add the file to the request
                formData.append('files[]', f, f.name);

            }

            // If this is not an evidence provider (role 3) or the status is INCOMPLETE.
            if (workitemRole != 3) {

                alert("You are must be an Evidence Provider to forward a work item.");

            } if (newStatus == 3) {

                alert("The status cannot be incomplete when forwarding a work item.");

            } else {

                $.ajax({

                    type: "POST",
                    url: "./uploadEvidenceFiles",
                    xhr: function () {

                        var myXhr = $.ajaxSettings.xhr();
                        return myXhr;

                    },
                    success: function (data) {

                        //console.log(JSON.stringify(data));
                        // your callback here
                        console.log('Success uploading evidence.');

                        $.post("./forwardWorkItemResult", {
                            "workitemId": workitemId,
                            "resultDescription": resultDescription,
                            "repeatFinding": repeatFinding,
                            "repeatFindingCOSA": repeatFindingCOSA,
                            "findingTitle": findingTitle,
                            "findingDescription": findingDescription,
                            "weaknessDescription": weaknessDescription,
                            "weaknessType": weaknessType,
                            "actionsDescription": actionsDescription,
                            "businessEffect": businessEffect,
                            "likelihood": likelihood,
                            "impact": impact,
                            "newStatus": "3",
                            "forwardTo": "2"
                        },
                            function (data, status) {
                                if (data != "err") {
                                    console.log(data) // 1 record updated
                                    console.log("Forwarded!!!!" + status);
                                    alert("Forwarded work item!");
                                    location.reload();
                                } else {
                                    alert("Something went wrong.");
                                }
                            });
                    },
                    error: function (error) {

                        if (error.status == '401') {
                            alert('Unauthorized... ');
                            window.location.replace('/home');
                        } else {
                            // handle error
                            console.log('Error uploading evidence ' + error);
                        }
                    },
                    async: true,
                    data: formData,
                    cache: false,
                    contentType: false,
                    processData: false,
                    timeout: 60000

                });

            };
        };

        function returnWorkItem() {

            var resultDescription = $(workItemForm).find('textarea[name=inputResultDescription]').val();
            var repeatFinding = $(workItemForm).find('select[name=inputRepeatFinding]').val();
            var repeatFindingCOSA = $(workItemForm).find('input[name=inputRepeatFindingCOSAId]').val();
            var findingTitle = $(workItemForm).find('input[name=inputFindingTitle]').val();
            var findingDescription = $(workItemForm).find('textarea[name=inputFindingDescription]').val();
            var weaknessDescription = $(workItemForm).find('textarea[name=inputWeaknessDescription]').val();
            var weaknessType = $(workItemForm).find('select[name=inputWeaknessType]').val();
            var actionsDescription = $(workItemForm).find('textarea[name=inputActionsDescription]').val();
            var businessEffect = $(workItemForm).find('textarea[name=inputBusinessEffect]').val();
            var likelihood = $(workItemForm).find('select[name=inputLikelihoodType]').val();
            var impact = $(workItemForm).find('select[name=inputImpactType]').val();
            var newStatus = $(workItemForm).find('select[name=inputStatus]').val();

            console.log('workitemId: ' + workitemId);
            console.log('resultDescription: ' + resultDescription);
            console.log('status: ' + newStatus);

            event.preventDefault();

            // If this is not an evidence approver (role 2) or the status is INCOMPLETE.
            if (workitemRole != 2) {

                alert("You are must be an Evidence Approver to return a work item to the Evidence Provider.");

            } if ((newStatus == 1) || (newStatus == 4)) {

                alert("The status cannot be PASS or RISK ACCEPTED when returning a work item.");

            } else {

                // Using the forward function to do the reutrn.
                $.post("./forwardWorkItemResult", {
                    "workitemId": workitemId,
                    "resultDescription": resultDescription,
                    "repeatFinding": repeatFinding,
                    "repeatFindingCOSA": repeatFindingCOSA,
                    "findingTitle": findingTitle,
                    "findingDescription": findingDescription,
                    "weaknessDescription": weaknessDescription,
                    "weaknessType": weaknessType,
                    "actionsDescription": actionsDescription,
                    "businessEffect": businessEffect,
                    "likelihood": likelihood,
                    "impact": impact,
                    "newStatus": newStatus,
                    "forwardTo": "3"
                },
                    function (data, status) {
                        console.log(data); // 1 record updated
                        console.log("Returned!!!!" + status);
                        alert("Returned work item!");
                        location.reload();

                    }).fail(function (err) {
                        if (err.status == '401') {
                            alert('Unauthorized... ');
                            window.location.replace('/home');
                        } else {
                            alert("Error: " + JSON.stringify(err.responseText))
                        }
                    });
            };
        };

    </script>
</body>

</html>
